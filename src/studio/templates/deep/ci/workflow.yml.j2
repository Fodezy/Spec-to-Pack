name: {{ meta.name }} CI/CD Pipeline

# Generated: {{ generated_at }}
# Template: deep-1.0.0

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: {% raw %}${{ github.repository }}{% endraw %}

jobs:
  # Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint
          npm run format:check

      - name: Run type checking
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: {{ meta.name | lower }}_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/{{ meta.name | lower }}_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/{{ meta.name | lower }}_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  # End-to-End Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start:test &
          npx wait-on http://localhost:3000

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: {% raw %}${{ secrets.LHCI_GITHUB_APP_TOKEN }}{% endraw %}

      - name: Run load tests
        run: npm run test:load

  # Build and Push Container Image
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: [quality, test]
    outputs:
      image: {% raw %}${{ steps.image.outputs.image }}{% endraw %}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: {% raw %}${{ env.DOCKER_REGISTRY }}{% endraw %}
          username: {% raw %}${{ github.actor }}{% endraw %}
          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: {% raw %}${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}{% endraw %}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={% raw %}{{branch}}{% endraw %}-
            type=raw,value=latest,enable={% raw %}{{is_default_branch}}{% endraw %}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: {% raw %}${{ steps.meta.outputs.tags }}{% endraw %}
          labels: {% raw %}${{ steps.meta.outputs.labels }}{% endraw %}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: echo "image={% raw %}${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}{% endraw %}" >> $GITHUB_OUTPUT

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: {% raw %}${{ needs.build.outputs.image }}{% endraw %}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://{{ meta.name | lower }}-staging.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID }}{% endraw %}
          aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY }}{% endraw %}
          aws-region: us-east-1

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name {{ meta.name | lower }}-staging --region us-east-1
          kubectl set image deployment/{{ meta.name | lower }}-api api={% raw %}${{ needs.build.outputs.image }}{% endraw %}
          kubectl rollout status deployment/{{ meta.name | lower }}-api

      - name: Run smoke tests
        run: |
          npx wait-on https://{{ meta.name | lower }}-staging.com/health --timeout 300000
          npm run test:smoke -- --baseUrl=https://{{ meta.name | lower }}-staging.com

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://{{ meta.name | lower }}.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID }}{% endraw %}
          aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY }}{% endraw %}
          aws-region: us-east-1

      - name: Blue-Green Deployment
        run: |
          aws eks update-kubeconfig --name {{ meta.name | lower }}-prod --region us-east-1
          
          # Deploy to green environment
          kubectl apply -f k8s/green/
          kubectl set image deployment/{{ meta.name | lower }}-api-green api={% raw %}${{ needs.build.outputs.image }}{% endraw %}
          kubectl rollout status deployment/{{ meta.name | lower }}-api-green
          
          # Health check green environment
          kubectl exec deployment/{{ meta.name | lower }}-api-green -- curl -f http://localhost:3000/health
          
          # Switch traffic to green
          kubectl patch service {{ meta.name | lower }}-api -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Cleanup blue environment
          sleep 300
          kubectl delete deployment {{ meta.name | lower }}-api-blue

      - name: Run production smoke tests
        run: |
          npx wait-on https://{{ meta.name | lower }}.com/health --timeout 300000
          npm run test:smoke -- --baseUrl=https://{{ meta.name | lower }}.com

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: {% raw %}${{ job.status }}{% endraw %}
          channel: '#deployments'
          webhook_url: {% raw %}${{ secrets.SLACK_WEBHOOK }}{% endraw %}
        if: always()

  # Database Migrations
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}

      - name: Run migrations
        run: |
          npm ci
          npm run migrate:up
        env:
          DATABASE_URL: {% raw %}${{ secrets.PROD_DATABASE_URL }}{% endraw %}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: {% raw %}${{ env.IMAGE_NAME }}{% endraw %}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

# Workflow notifications
notifications:
  slack:
    if: failure()
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, build, security]
    steps:
      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: {% raw %}${{ secrets.SLACK_WEBHOOK }}{% endraw %}